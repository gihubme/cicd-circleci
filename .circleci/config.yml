# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
orbs:
    ecm: pay-justice/export-commit-message@0.0.1
jobs: # a collection of steps
    build_prod:
        docker:
            # specify the version you desire here
            - image: circleci/openjdk:11-browsers-legacy
            # Specify service dependencies here if necessary
            # CircleCI maintains a library of pre-built images
            # documented at https://circleci.com/docs/2.0/circleci-images/
            # - image: circleci/postgres:9.4

            working_directory: ~/repo
            environment:
                # Customize the JVM maximum heap limit
                MAVEN_OPTS: -Xmx3200m

        steps:
            - checkout
            - ecm/export_commit
            # Download and cache dependencies
            - restore_cache:
                keys:
                  - v1-dependencies-{{ checksum "pom.xml" }}
                  # fallback to using the latest cache if no exact match is found
                  - v1-dependencies-
                - run: mvn dependency:go-offline
                - save_cache:
                    paths:
                      - ~/.m2
                    key: v1-dependencies-{{ checksum "pom.xml" }}
                - run: git config user.email "n.karakin@qmul.ac.uk"
                - run: git config user.name "Via CircleCI Build at gihubme"
                - when:
                    condition:
                        equal: [[ $GIT_COMMIT_MESSAGE == */"[majour]/"* ]]
                    steps:
                        - run: echo "build job, commit message with /"[majour]/" >> $GIT_COMMIT_MESSAGE"
                        - run: mvn --batch-mode build-helper:parse-version versions:set -DnewVersion=${parsedVersion.nextMajorVersion}.0.0-SNAPSHOT versions:commit
                        - run: mvn --batch-mode release:prepare release:perform -s .circleci/settings.xml
                - when:
                    condition:
                        equal: [ [ $GIT_COMMIT_MESSAGE != */"[ majour ]/"* ] ]
                    steps:
                        - run: echo "build job, commit message without /"[majour]/" >> $GIT_COMMIT_MESSAGE"
                        - run: mvn --batch-mode build-helper:parse-version versions:set -DnewVersion=${parsedVersion.MajorVersion}.${parsedVersion.nextMinorVersion}.0-SNAPSHOT versions:commit
                        - run: mvn --batch-mode release:prepare release:perform -s .circleci/settings.xml

    build_master:
        docker:
            # specify the version you desire here
            - image: circleci/openjdk:11-browsers-legacy
            working_directory: ~/repo
            environment:
                # Customize the JVM maximum heap limit
                MAVEN_OPTS: -Xmx3200m
        steps:
            - checkout
            # Download and cache dependencies
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "pom.xml" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-
            - run: mvn dependency:go-offline
            - save_cache:
                  paths:
                      - ~/.m2
                  key: v1-dependencies-{{ checksum "pom.xml" }}
            # run tests and update snapshot versions!
            - run:
                  name: build-master-step
                  command: mvn clean verify && mvn --batch-mode release:update-versions

    build_feature:
        docker:
            # specify the version you desire here
            - image: circleci/openjdk:11-browsers-legacy
            working_directory: ~/repo
            environment:
                # Customize the JVM maximum heap limit
                MAVEN_OPTS: -Xmx3200m
        steps:
            - checkout
            # Download and cache dependencies
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "pom.xml" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-
            - run: mvn dependency:go-offline
            - save_cache:
                  paths:
                      - ~/.m2
                  key: v1-dependencies-{{ checksum "pom.xml" }}
            # run tests!
            - run:
                  name: build-feature-step
                  command: mvn clean verify

workflows:
    build_prod:
        jobs:
            - build_prod:
                  context:
                      - PCLOUD
                  filters:
                      branches:
                          only:
                              - prod
    build_master:
        jobs:
            - build_master:
                  filters:
                      branches:
                          only:
                              - master
    build_feature:
        jobs:
            - build_feature:
                  filters:
                      branches:
                          only:
                              - /feature.*/
